// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.21.0
// source: pot.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageType int32

const (
	MessageType_Block_Data           MessageType = 0
	MessageType_Block_Request        MessageType = 1
	MessageType_Block_Response       MessageType = 2
	MessageType_PoT_Request          MessageType = 3
	MessageType_PoT_Response         MessageType = 4
	MessageType_PoT_Proof            MessageType = 5
	MessageType_SendDci_Request      MessageType = 6
	MessageType_DevastateDci_Request MessageType = 7
	MessageType_Client_Transaction   MessageType = 8
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "Block_Data",
		1: "Block_Request",
		2: "Block_Response",
		3: "PoT_Request",
		4: "PoT_Response",
		5: "PoT_Proof",
		6: "SendDci_Request",
		7: "DevastateDci_Request",
		8: "Client_Transaction",
	}
	MessageType_value = map[string]int32{
		"Block_Data":           0,
		"Block_Request":        1,
		"Block_Response":       2,
		"PoT_Request":          3,
		"PoT_Response":         4,
		"PoT_Proof":            5,
		"SendDci_Request":      6,
		"DevastateDci_Request": 7,
		"Client_Transaction":   8,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_pot_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_pot_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{0}
}

type TxDataType int32

const (
	TxDataType_RawTx     TxDataType = 0
	TxDataType_ExcutedTx TxDataType = 1
)

// Enum value maps for TxDataType.
var (
	TxDataType_name = map[int32]string{
		0: "RawTx",
		1: "ExcutedTx",
	}
	TxDataType_value = map[string]int32{
		"RawTx":     0,
		"ExcutedTx": 1,
	}
)

func (x TxDataType) Enum() *TxDataType {
	p := new(TxDataType)
	*p = x
	return p
}

func (x TxDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_pot_proto_enumTypes[1].Descriptor()
}

func (TxDataType) Type() protoreflect.EnumType {
	return &file_pot_proto_enumTypes[1]
}

func (x TxDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxDataType.Descriptor instead.
func (TxDataType) EnumDescriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{1}
}

type TxType int32

const (
	TxType_CreateLockTransaction      TxType = 0
	TxType_LockTransferTranscation    TxType = 1
	TxType_NonLockTransferTranscation TxType = 2
	TxType_DevasteTransaction         TxType = 3
)

// Enum value maps for TxType.
var (
	TxType_name = map[int32]string{
		0: "CreateLockTransaction",
		1: "LockTransferTranscation",
		2: "NonLockTransferTranscation",
		3: "DevasteTransaction",
	}
	TxType_value = map[string]int32{
		"CreateLockTransaction":      0,
		"LockTransferTranscation":    1,
		"NonLockTransferTranscation": 2,
		"DevasteTransaction":         3,
	}
)

func (x TxType) Enum() *TxType {
	p := new(TxType)
	*p = x
	return p
}

func (x TxType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxType) Descriptor() protoreflect.EnumDescriptor {
	return file_pot_proto_enumTypes[2].Descriptor()
}

func (TxType) Type() protoreflect.EnumType {
	return &file_pot_proto_enumTypes[2]
}

func (x TxType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxType.Descriptor instead.
func (TxType) EnumDescriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{2}
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header         *Header          `protobuf:"bytes,1,opt,name=Header,proto3" json:"Header,omitempty"`
	Txs            []*Tx            `protobuf:"bytes,2,rep,name=Txs,proto3" json:"Txs,omitempty"`
	ExecuteHeaders []*ExecuteHeader `protobuf:"bytes,3,rep,name=ExecuteHeaders,proto3" json:"ExecuteHeaders,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	mi := &file_pot_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{0}
}

func (x *Block) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Block) GetTxs() []*Tx {
	if x != nil {
		return x.Txs
	}
	return nil
}

func (x *Block) GetExecuteHeaders() []*ExecuteHeader {
	if x != nil {
		return x.ExecuteHeaders
	}
	return nil
}

type Tx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Tx) Reset() {
	*x = Tx{}
	mi := &file_pot_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tx) ProtoMessage() {}

func (x *Tx) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tx.ProtoReflect.Descriptor instead.
func (*Tx) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{1}
}

func (x *Tx) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type PoTMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgType MessageType `protobuf:"varint,1,opt,name=MsgType,proto3,enum=pb.MessageType" json:"MsgType,omitempty"`
	MsgByte []byte      `protobuf:"bytes,2,opt,name=MsgByte,proto3" json:"MsgByte,omitempty"`
}

func (x *PoTMessage) Reset() {
	*x = PoTMessage{}
	mi := &file_pot_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoTMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoTMessage) ProtoMessage() {}

func (x *PoTMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoTMessage.ProtoReflect.Descriptor instead.
func (*PoTMessage) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{2}
}

func (x *PoTMessage) GetMsgType() MessageType {
	if x != nil {
		return x.MsgType
	}
	return MessageType_Block_Data
}

func (x *PoTMessage) GetMsgByte() []byte {
	if x != nil {
		return x.MsgByte
	}
	return nil
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height         uint64   `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
	ParentHash     []byte   `protobuf:"bytes,2,opt,name=ParentHash,proto3" json:"ParentHash,omitempty"`
	UncleHash      [][]byte `protobuf:"bytes,3,rep,name=UncleHash,proto3" json:"UncleHash,omitempty"`
	Mixdigest      []byte   `protobuf:"bytes,4,opt,name=Mixdigest,proto3" json:"Mixdigest,omitempty"`
	Difficulty     []byte   `protobuf:"bytes,5,opt,name=Difficulty,proto3" json:"Difficulty,omitempty"`
	Nonce          int64    `protobuf:"varint,6,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	Timestamp      []byte   `protobuf:"bytes,7,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	PoTProof       [][]byte `protobuf:"bytes,8,rep,name=PoTProof,proto3" json:"PoTProof,omitempty"`
	Address        int64    `protobuf:"varint,9,opt,name=Address,proto3" json:"Address,omitempty"`
	Hashes         []byte   `protobuf:"bytes,10,opt,name=Hashes,proto3" json:"Hashes,omitempty"`
	PeerId         string   `protobuf:"bytes,11,opt,name=PeerId,proto3" json:"PeerId,omitempty"`
	Pubkey         []byte   `protobuf:"bytes,12,opt,name=Pubkey,proto3" json:"Pubkey,omitempty"`
	Txhash         []byte   `protobuf:"bytes,13,opt,name=Txhash,proto3" json:"Txhash,omitempty"`
	CommiteePubkey []byte   `protobuf:"bytes,14,opt,name=CommiteePubkey,proto3" json:"CommiteePubkey,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	mi := &file_pot_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{3}
}

func (x *Header) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Header) GetParentHash() []byte {
	if x != nil {
		return x.ParentHash
	}
	return nil
}

func (x *Header) GetUncleHash() [][]byte {
	if x != nil {
		return x.UncleHash
	}
	return nil
}

func (x *Header) GetMixdigest() []byte {
	if x != nil {
		return x.Mixdigest
	}
	return nil
}

func (x *Header) GetDifficulty() []byte {
	if x != nil {
		return x.Difficulty
	}
	return nil
}

func (x *Header) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *Header) GetTimestamp() []byte {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Header) GetPoTProof() [][]byte {
	if x != nil {
		return x.PoTProof
	}
	return nil
}

func (x *Header) GetAddress() int64 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *Header) GetHashes() []byte {
	if x != nil {
		return x.Hashes
	}
	return nil
}

func (x *Header) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *Header) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *Header) GetTxhash() []byte {
	if x != nil {
		return x.Txhash
	}
	return nil
}

func (x *Header) GetCommiteePubkey() []byte {
	if x != nil {
		return x.CommiteePubkey
	}
	return nil
}

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      int32  `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Operation []byte `protobuf:"bytes,2,opt,name=Operation,proto3" json:"Operation,omitempty"`
	Proof     []byte `protobuf:"bytes,3,opt,name=Proof,proto3" json:"Proof,omitempty"`
}

func (x *Command) Reset() {
	*x = Command{}
	mi := &file_pot_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{4}
}

func (x *Command) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Command) GetOperation() []byte {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *Command) GetProof() []byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

type BlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height uint64 `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
	Hashes []byte `protobuf:"bytes,2,opt,name=Hashes,proto3" json:"Hashes,omitempty"`
	Srcid  int64  `protobuf:"varint,3,opt,name=srcid,proto3" json:"srcid,omitempty"`
	Desid  int64  `protobuf:"varint,4,opt,name=desid,proto3" json:"desid,omitempty"`
	Src    string `protobuf:"bytes,5,opt,name=src,proto3" json:"src,omitempty"`
	Des    string `protobuf:"bytes,6,opt,name=des,proto3" json:"des,omitempty"`
}

func (x *BlockRequest) Reset() {
	*x = BlockRequest{}
	mi := &file_pot_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRequest) ProtoMessage() {}

func (x *BlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRequest.ProtoReflect.Descriptor instead.
func (*BlockRequest) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{5}
}

func (x *BlockRequest) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BlockRequest) GetHashes() []byte {
	if x != nil {
		return x.Hashes
	}
	return nil
}

func (x *BlockRequest) GetSrcid() int64 {
	if x != nil {
		return x.Srcid
	}
	return 0
}

func (x *BlockRequest) GetDesid() int64 {
	if x != nil {
		return x.Desid
	}
	return 0
}

func (x *BlockRequest) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *BlockRequest) GetDes() string {
	if x != nil {
		return x.Des
	}
	return ""
}

type BlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *Block `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	Src   string `protobuf:"bytes,2,opt,name=src,proto3" json:"src,omitempty"`
	Des   string `protobuf:"bytes,3,opt,name=des,proto3" json:"des,omitempty"`
	Srcid int64  `protobuf:"varint,4,opt,name=srcid,proto3" json:"srcid,omitempty"`
	Desid int64  `protobuf:"varint,5,opt,name=desid,proto3" json:"desid,omitempty"`
}

func (x *BlockResponse) Reset() {
	*x = BlockResponse{}
	mi := &file_pot_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockResponse) ProtoMessage() {}

func (x *BlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockResponse.ProtoReflect.Descriptor instead.
func (*BlockResponse) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{6}
}

func (x *BlockResponse) GetBlock() *Block {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *BlockResponse) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *BlockResponse) GetDes() string {
	if x != nil {
		return x.Des
	}
	return ""
}

func (x *BlockResponse) GetSrcid() int64 {
	if x != nil {
		return x.Srcid
	}
	return 0
}

func (x *BlockResponse) GetDesid() int64 {
	if x != nil {
		return x.Desid
	}
	return 0
}

type PoTRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch uint64 `protobuf:"varint,1,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
	Desid int64  `protobuf:"varint,2,opt,name=Desid,proto3" json:"Desid,omitempty"`
	Des   string `protobuf:"bytes,3,opt,name=Des,proto3" json:"Des,omitempty"`
	Srcid int64  `protobuf:"varint,4,opt,name=Srcid,proto3" json:"Srcid,omitempty"`
	Src   string `protobuf:"bytes,5,opt,name=Src,proto3" json:"Src,omitempty"`
}

func (x *PoTRequest) Reset() {
	*x = PoTRequest{}
	mi := &file_pot_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoTRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoTRequest) ProtoMessage() {}

func (x *PoTRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoTRequest.ProtoReflect.Descriptor instead.
func (*PoTRequest) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{7}
}

func (x *PoTRequest) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *PoTRequest) GetDesid() int64 {
	if x != nil {
		return x.Desid
	}
	return 0
}

func (x *PoTRequest) GetDes() string {
	if x != nil {
		return x.Des
	}
	return ""
}

func (x *PoTRequest) GetSrcid() int64 {
	if x != nil {
		return x.Srcid
	}
	return 0
}

func (x *PoTRequest) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

type PotProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch uint64 `protobuf:"varint,1,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
	Proof []byte `protobuf:"bytes,2,opt,name=Proof,proto3" json:"Proof,omitempty"`
	Src   string `protobuf:"bytes,3,opt,name=Src,proto3" json:"Src,omitempty"`
	Des   string `protobuf:"bytes,4,opt,name=Des,proto3" json:"Des,omitempty"`
}

func (x *PotProof) Reset() {
	*x = PotProof{}
	mi := &file_pot_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PotProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PotProof) ProtoMessage() {}

func (x *PotProof) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PotProof.ProtoReflect.Descriptor instead.
func (*PotProof) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{8}
}

func (x *PotProof) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *PotProof) GetProof() []byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *PotProof) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *PotProof) GetDes() string {
	if x != nil {
		return x.Des
	}
	return ""
}

type PoTResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch uint64 `protobuf:"varint,1,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
	Desid int64  `protobuf:"varint,2,opt,name=Desid,proto3" json:"Desid,omitempty"`
	Des   string `protobuf:"bytes,3,opt,name=Des,proto3" json:"Des,omitempty"`
	Srcid int64  `protobuf:"varint,4,opt,name=Srcid,proto3" json:"Srcid,omitempty"`
	Src   string `protobuf:"bytes,5,opt,name=Src,proto3" json:"Src,omitempty"`
	Proof []byte `protobuf:"bytes,6,opt,name=Proof,proto3" json:"Proof,omitempty"`
}

func (x *PoTResponse) Reset() {
	*x = PoTResponse{}
	mi := &file_pot_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoTResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoTResponse) ProtoMessage() {}

func (x *PoTResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoTResponse.ProtoReflect.Descriptor instead.
func (*PoTResponse) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{9}
}

func (x *PoTResponse) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *PoTResponse) GetDesid() int64 {
	if x != nil {
		return x.Desid
	}
	return 0
}

func (x *PoTResponse) GetDes() string {
	if x != nil {
		return x.Des
	}
	return ""
}

func (x *PoTResponse) GetSrcid() int64 {
	if x != nil {
		return x.Srcid
	}
	return 0
}

func (x *PoTResponse) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *PoTResponse) GetProof() []byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

type ClientTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxType TxType     `protobuf:"varint,1,opt,name=TxType,proto3,enum=pb.TxType" json:"TxType,omitempty"`
	Tx     *RawTxData `protobuf:"bytes,2,opt,name=Tx,proto3" json:"Tx,omitempty"`
}

func (x *ClientTransaction) Reset() {
	*x = ClientTransaction{}
	mi := &file_pot_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientTransaction) ProtoMessage() {}

func (x *ClientTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientTransaction.ProtoReflect.Descriptor instead.
func (*ClientTransaction) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{10}
}

func (x *ClientTransaction) GetTxType() TxType {
	if x != nil {
		return x.TxType
	}
	return TxType_CreateLockTransaction
}

func (x *ClientTransaction) GetTx() *RawTxData {
	if x != nil {
		return x.Tx
	}
	return nil
}

type TxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxDataType TxDataType `protobuf:"varint,1,opt,name=TxDataType,proto3,enum=pb.TxDataType" json:"TxDataType,omitempty"`
	TxData     []byte     `protobuf:"bytes,2,opt,name=TxData,proto3" json:"TxData,omitempty"`
}

func (x *TxData) Reset() {
	*x = TxData{}
	mi := &file_pot_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxData) ProtoMessage() {}

func (x *TxData) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxData.ProtoReflect.Descriptor instead.
func (*TxData) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{11}
}

func (x *TxData) GetTxDataType() TxDataType {
	if x != nil {
		return x.TxDataType
	}
	return TxDataType_RawTx
}

func (x *TxData) GetTxData() []byte {
	if x != nil {
		return x.TxData
	}
	return nil
}

type TxInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxID      []byte `protobuf:"bytes,2,opt,name=TxID,proto3" json:"TxID,omitempty"`
	Voutput   int64  `protobuf:"varint,3,opt,name=Voutput,proto3" json:"Voutput,omitempty"`
	Scriptsig []byte `protobuf:"bytes,4,opt,name=Scriptsig,proto3" json:"Scriptsig,omitempty"`
	Value     int64  `protobuf:"varint,5,opt,name=Value,proto3" json:"Value,omitempty"`
	Address   []byte `protobuf:"bytes,6,opt,name=Address,proto3" json:"Address,omitempty"`
	BciType   int32  `protobuf:"varint,7,opt,name=BciType,proto3" json:"BciType,omitempty"`
}

func (x *TxInput) Reset() {
	*x = TxInput{}
	mi := &file_pot_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxInput) ProtoMessage() {}

func (x *TxInput) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxInput.ProtoReflect.Descriptor instead.
func (*TxInput) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{12}
}

func (x *TxInput) GetTxID() []byte {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *TxInput) GetVoutput() int64 {
	if x != nil {
		return x.Voutput
	}
	return 0
}

func (x *TxInput) GetScriptsig() []byte {
	if x != nil {
		return x.Scriptsig
	}
	return nil
}

func (x *TxInput) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TxInput) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *TxInput) GetBciType() int32 {
	if x != nil {
		return x.BciType
	}
	return 0
}

type TxOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   []byte  `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	Value     int64   `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
	Interest  int64   `protobuf:"varint,3,opt,name=Interest,proto3" json:"Interest,omitempty"`
	ScriptPk  []byte  `protobuf:"bytes,4,opt,name=ScriptPk,proto3" json:"ScriptPk,omitempty"`
	BciType   int32   `protobuf:"varint,5,opt,name=BciType,proto3" json:"BciType,omitempty"`
	LockTime  uint64  `protobuf:"varint,6,opt,name=LockTime,proto3" json:"LockTime,omitempty"`
	Proof     []byte  `protobuf:"bytes,7,opt,name=Proof,proto3" json:"Proof,omitempty"`
	Rate      float32 `protobuf:"fixed32,8,opt,name=Rate,proto3" json:"Rate,omitempty"`
	Data      []byte  `protobuf:"bytes,9,opt,name=Data,proto3" json:"Data,omitempty"`
	BurnLock  uint64  `protobuf:"varint,10,opt,name=BurnLock,proto3" json:"BurnLock,omitempty"`
	CreatedAt uint64  `protobuf:"varint,11,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
}

func (x *TxOutput) Reset() {
	*x = TxOutput{}
	mi := &file_pot_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxOutput) ProtoMessage() {}

func (x *TxOutput) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxOutput.ProtoReflect.Descriptor instead.
func (*TxOutput) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{13}
}

func (x *TxOutput) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *TxOutput) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TxOutput) GetInterest() int64 {
	if x != nil {
		return x.Interest
	}
	return 0
}

func (x *TxOutput) GetScriptPk() []byte {
	if x != nil {
		return x.ScriptPk
	}
	return nil
}

func (x *TxOutput) GetBciType() int32 {
	if x != nil {
		return x.BciType
	}
	return 0
}

func (x *TxOutput) GetLockTime() uint64 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *TxOutput) GetProof() []byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *TxOutput) GetRate() float32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *TxOutput) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TxOutput) GetBurnLock() uint64 {
	if x != nil {
		return x.BurnLock
	}
	return 0
}

func (x *TxOutput) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type ExecutedTxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutedHeight uint64 `protobuf:"varint,1,opt,name=ExecutedHeight,proto3" json:"ExecutedHeight,omitempty"`
	TxHash         []byte `protobuf:"bytes,2,opt,name=TxHash,proto3" json:"TxHash,omitempty"`
}

func (x *ExecutedTxData) Reset() {
	*x = ExecutedTxData{}
	mi := &file_pot_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutedTxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutedTxData) ProtoMessage() {}

func (x *ExecutedTxData) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutedTxData.ProtoReflect.Descriptor instead.
func (*ExecutedTxData) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{14}
}

func (x *ExecutedTxData) GetExecutedHeight() uint64 {
	if x != nil {
		return x.ExecutedHeight
	}
	return 0
}

func (x *ExecutedTxData) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

type ExecuteBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ExecuteHeader `protobuf:"bytes,1,opt,name=Header,proto3" json:"Header,omitempty"`
	Txs    []*ExecutedTx  `protobuf:"bytes,2,rep,name=Txs,proto3" json:"Txs,omitempty"`
}

func (x *ExecuteBlock) Reset() {
	*x = ExecuteBlock{}
	mi := &file_pot_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteBlock) ProtoMessage() {}

func (x *ExecuteBlock) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteBlock.ProtoReflect.Descriptor instead.
func (*ExecuteBlock) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{15}
}

func (x *ExecuteBlock) GetHeader() *ExecuteHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ExecuteBlock) GetTxs() []*ExecutedTx {
	if x != nil {
		return x.Txs
	}
	return nil
}

type ExecuteHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height        uint64 `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
	BlockHash     []byte `protobuf:"bytes,2,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
	ChainID       int64  `protobuf:"varint,3,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	TxsHash       []byte `protobuf:"bytes,4,opt,name=TxsHash,proto3" json:"TxsHash,omitempty"`
	CommitedTxNum uint64 `protobuf:"varint,5,opt,name=CommitedTxNum,proto3" json:"CommitedTxNum,omitempty"`
	ExecutedTxNum uint64 `protobuf:"varint,6,opt,name=ExecutedTxNum,proto3" json:"ExecutedTxNum,omitempty"`
	GasIncentive  uint64 `protobuf:"varint,7,opt,name=GasIncentive,proto3" json:"GasIncentive,omitempty"`
	PoSLeader     []byte `protobuf:"bytes,8,opt,name=PoSLeader,proto3" json:"PoSLeader,omitempty"`
	PoSVoteInfo   []byte `protobuf:"bytes,9,opt,name=PoSVoteInfo,proto3" json:"PoSVoteInfo,omitempty"`
}

func (x *ExecuteHeader) Reset() {
	*x = ExecuteHeader{}
	mi := &file_pot_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteHeader) ProtoMessage() {}

func (x *ExecuteHeader) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteHeader.ProtoReflect.Descriptor instead.
func (*ExecuteHeader) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{16}
}

func (x *ExecuteHeader) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ExecuteHeader) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *ExecuteHeader) GetChainID() int64 {
	if x != nil {
		return x.ChainID
	}
	return 0
}

func (x *ExecuteHeader) GetTxsHash() []byte {
	if x != nil {
		return x.TxsHash
	}
	return nil
}

func (x *ExecuteHeader) GetCommitedTxNum() uint64 {
	if x != nil {
		return x.CommitedTxNum
	}
	return 0
}

func (x *ExecuteHeader) GetExecutedTxNum() uint64 {
	if x != nil {
		return x.ExecutedTxNum
	}
	return 0
}

func (x *ExecuteHeader) GetGasIncentive() uint64 {
	if x != nil {
		return x.GasIncentive
	}
	return 0
}

func (x *ExecuteHeader) GetPoSLeader() []byte {
	if x != nil {
		return x.PoSLeader
	}
	return nil
}

func (x *ExecuteHeader) GetPoSVoteInfo() []byte {
	if x != nil {
		return x.PoSVoteInfo
	}
	return nil
}

type ExecutedTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash []byte `protobuf:"bytes,1,opt,name=TxHash,proto3" json:"TxHash,omitempty"`
	Height uint64 `protobuf:"varint,2,opt,name=Height,proto3" json:"Height,omitempty"`
	Data   []byte `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ExecutedTx) Reset() {
	*x = ExecutedTx{}
	mi := &file_pot_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutedTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutedTx) ProtoMessage() {}

func (x *ExecutedTx) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutedTx.ProtoReflect.Descriptor instead.
func (*ExecutedTx) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{17}
}

func (x *ExecutedTx) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *ExecutedTx) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ExecutedTx) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetTxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartHeight uint64 `protobuf:"varint,1,opt,name=StartHeight,proto3" json:"StartHeight,omitempty"`
	Des         string `protobuf:"bytes,2,opt,name=Des,proto3" json:"Des,omitempty"`
}

func (x *GetTxRequest) Reset() {
	*x = GetTxRequest{}
	mi := &file_pot_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxRequest) ProtoMessage() {}

func (x *GetTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxRequest.ProtoReflect.Descriptor instead.
func (*GetTxRequest) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{18}
}

func (x *GetTxRequest) GetStartHeight() uint64 {
	if x != nil {
		return x.StartHeight
	}
	return 0
}

func (x *GetTxRequest) GetDes() string {
	if x != nil {
		return x.Des
	}
	return ""
}

type GetTxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start   uint64          `protobuf:"varint,1,opt,name=Start,proto3" json:"Start,omitempty"`
	End     uint64          `protobuf:"varint,2,opt,name=End,proto3" json:"End,omitempty"`
	Blocks  []*ExecuteBlock `protobuf:"bytes,3,rep,name=Blocks,proto3" json:"Blocks,omitempty"`
	Value   int64           `protobuf:"varint,4,opt,name=Value,proto3" json:"Value,omitempty"`
	Address []byte          `protobuf:"bytes,5,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *GetTxResponse) Reset() {
	*x = GetTxResponse{}
	mi := &file_pot_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxResponse) ProtoMessage() {}

func (x *GetTxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxResponse.ProtoReflect.Descriptor instead.
func (*GetTxResponse) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{19}
}

func (x *GetTxResponse) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *GetTxResponse) GetEnd() uint64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *GetTxResponse) GetBlocks() []*ExecuteBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *GetTxResponse) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *GetTxResponse) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

type VerifyTxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txs []*ExecutedTxData `protobuf:"bytes,1,rep,name=Txs,proto3" json:"Txs,omitempty"`
}

func (x *VerifyTxRequest) Reset() {
	*x = VerifyTxRequest{}
	mi := &file_pot_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyTxRequest) ProtoMessage() {}

func (x *VerifyTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyTxRequest.ProtoReflect.Descriptor instead.
func (*VerifyTxRequest) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{20}
}

func (x *VerifyTxRequest) GetTxs() []*ExecutedTxData {
	if x != nil {
		return x.Txs
	}
	return nil
}

type VerifyTxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txs  []*ExecutedTxData `protobuf:"bytes,1,rep,name=Txs,proto3" json:"Txs,omitempty"`
	Flag []bool            `protobuf:"varint,2,rep,packed,name=flag,proto3" json:"flag,omitempty"`
}

func (x *VerifyTxResponse) Reset() {
	*x = VerifyTxResponse{}
	mi := &file_pot_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyTxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyTxResponse) ProtoMessage() {}

func (x *VerifyTxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyTxResponse.ProtoReflect.Descriptor instead.
func (*VerifyTxResponse) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{21}
}

func (x *VerifyTxResponse) GetTxs() []*ExecutedTxData {
	if x != nil {
		return x.Txs
	}
	return nil
}

func (x *VerifyTxResponse) GetFlag() []bool {
	if x != nil {
		return x.Flag
	}
	return nil
}

type ExecuteTxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx []byte `protobuf:"bytes,1,opt,name=Tx,proto3" json:"Tx,omitempty"`
}

func (x *ExecuteTxRequest) Reset() {
	*x = ExecuteTxRequest{}
	mi := &file_pot_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteTxRequest) ProtoMessage() {}

func (x *ExecuteTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteTxRequest.ProtoReflect.Descriptor instead.
func (*ExecuteTxRequest) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{22}
}

func (x *ExecuteTxRequest) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

type ExecuteTxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx   []byte `protobuf:"bytes,1,opt,name=Tx,proto3" json:"Tx,omitempty"`
	Flag bool   `protobuf:"varint,2,opt,name=Flag,proto3" json:"Flag,omitempty"`
	TxID []byte `protobuf:"bytes,3,opt,name=TxID,proto3" json:"TxID,omitempty"`
}

func (x *ExecuteTxResponse) Reset() {
	*x = ExecuteTxResponse{}
	mi := &file_pot_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteTxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteTxResponse) ProtoMessage() {}

func (x *ExecuteTxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteTxResponse.ProtoReflect.Descriptor instead.
func (*ExecuteTxResponse) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{23}
}

func (x *ExecuteTxResponse) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *ExecuteTxResponse) GetFlag() bool {
	if x != nil {
		return x.Flag
	}
	return false
}

func (x *ExecuteTxResponse) GetTxID() []byte {
	if x != nil {
		return x.TxID
	}
	return nil
}

type IncensentiveVerifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash [][]byte `protobuf:"bytes,1,rep,name=TxHash,proto3" json:"TxHash,omitempty"`
}

func (x *IncensentiveVerifyRequest) Reset() {
	*x = IncensentiveVerifyRequest{}
	mi := &file_pot_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncensentiveVerifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncensentiveVerifyRequest) ProtoMessage() {}

func (x *IncensentiveVerifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncensentiveVerifyRequest.ProtoReflect.Descriptor instead.
func (*IncensentiveVerifyRequest) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{24}
}

func (x *IncensentiveVerifyRequest) GetTxHash() [][]byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

type IncensentiveVerifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifyRes []bool `protobuf:"varint,1,rep,packed,name=VerifyRes,proto3" json:"VerifyRes,omitempty"`
}

func (x *IncensentiveVerifyResponse) Reset() {
	*x = IncensentiveVerifyResponse{}
	mi := &file_pot_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncensentiveVerifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncensentiveVerifyResponse) ProtoMessage() {}

func (x *IncensentiveVerifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncensentiveVerifyResponse.ProtoReflect.Descriptor instead.
func (*IncensentiveVerifyResponse) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{25}
}

func (x *IncensentiveVerifyResponse) GetVerifyRes() []bool {
	if x != nil {
		return x.VerifyRes
	}
	return nil
}

type DciReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  []byte    `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	Amount   int64     `protobuf:"varint,2,opt,name=Amount,proto3" json:"Amount,omitempty"`
	ChainID  int32     `protobuf:"varint,3,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	DciProof *DciProof `protobuf:"bytes,4,opt,name=DciProof,proto3" json:"DciProof,omitempty"`
}

func (x *DciReward) Reset() {
	*x = DciReward{}
	mi := &file_pot_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DciReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DciReward) ProtoMessage() {}

func (x *DciReward) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DciReward.ProtoReflect.Descriptor instead.
func (*DciReward) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{26}
}

func (x *DciReward) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *DciReward) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *DciReward) GetChainID() int32 {
	if x != nil {
		return x.ChainID
	}
	return 0
}

func (x *DciReward) GetDciProof() *DciProof {
	if x != nil {
		return x.DciProof
	}
	return nil
}

type DciProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height    uint64 `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
	BlockHash []byte `protobuf:"bytes,2,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
	TxHash    []byte `protobuf:"bytes,3,opt,name=TxHash,proto3" json:"TxHash,omitempty"`
	BciType   int32  `protobuf:"varint,4,opt,name=BciType,proto3" json:"BciType,omitempty"`
}

func (x *DciProof) Reset() {
	*x = DciProof{}
	mi := &file_pot_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DciProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DciProof) ProtoMessage() {}

func (x *DciProof) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DciProof.ProtoReflect.Descriptor instead.
func (*DciProof) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{27}
}

func (x *DciProof) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *DciProof) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *DciProof) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *DciProof) GetBciType() int32 {
	if x != nil {
		return x.BciType
	}
	return 0
}

type SendDciRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DciReward []*DciReward `protobuf:"bytes,1,rep,name=DciReward,proto3" json:"DciReward,omitempty"`
}

func (x *SendDciRequest) Reset() {
	*x = SendDciRequest{}
	mi := &file_pot_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendDciRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendDciRequest) ProtoMessage() {}

func (x *SendDciRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendDciRequest.ProtoReflect.Descriptor instead.
func (*SendDciRequest) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{28}
}

func (x *SendDciRequest) GetDciReward() []*DciReward {
	if x != nil {
		return x.DciReward
	}
	return nil
}

type SendDciResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuccess bool   `protobuf:"varint,1,opt,name=IsSuccess,proto3" json:"IsSuccess,omitempty"`
	Height    uint64 `protobuf:"varint,2,opt,name=Height,proto3" json:"Height,omitempty"`
}

func (x *SendDciResponse) Reset() {
	*x = SendDciResponse{}
	mi := &file_pot_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendDciResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendDciResponse) ProtoMessage() {}

func (x *SendDciResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendDciResponse.ProtoReflect.Descriptor instead.
func (*SendDciResponse) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{29}
}

func (x *SendDciResponse) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *SendDciResponse) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type GetBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   []byte `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (x *GetBalanceRequest) Reset() {
	*x = GetBalanceRequest{}
	mi := &file_pot_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceRequest) ProtoMessage() {}

func (x *GetBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetBalanceRequest) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{30}
}

func (x *GetBalanceRequest) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *GetBalanceRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type GetBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte  `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	Balance int64   `protobuf:"varint,2,opt,name=Balance,proto3" json:"Balance,omitempty"`
	Utxos   []*Utxo `protobuf:"bytes,3,rep,name=Utxos,proto3" json:"Utxos,omitempty"`
}

func (x *GetBalanceResponse) Reset() {
	*x = GetBalanceResponse{}
	mi := &file_pot_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceResponse) ProtoMessage() {}

func (x *GetBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceResponse.ProtoReflect.Descriptor instead.
func (*GetBalanceResponse) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{31}
}

func (x *GetBalanceResponse) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *GetBalanceResponse) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *GetBalanceResponse) GetUtxos() []*Utxo {
	if x != nil {
		return x.Utxos
	}
	return nil
}

type RawTxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxID           []byte           `protobuf:"bytes,1,opt,name=TxID,proto3" json:"TxID,omitempty"`
	TxInput        []*TxInput       `protobuf:"bytes,2,rep,name=TxInput,proto3" json:"TxInput,omitempty"`
	TxOutput       []*TxOutput      `protobuf:"bytes,3,rep,name=TxOutput,proto3" json:"TxOutput,omitempty"`
	TransactionFee int64            `protobuf:"varint,5,opt,name=TransactionFee,proto3" json:"TransactionFee,omitempty"`
	CoinbaseProofs []*CoinbaseProof `protobuf:"bytes,4,rep,name=CoinbaseProofs,proto3" json:"CoinbaseProofs,omitempty"`
}

func (x *RawTxData) Reset() {
	*x = RawTxData{}
	mi := &file_pot_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RawTxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawTxData) ProtoMessage() {}

func (x *RawTxData) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawTxData.ProtoReflect.Descriptor instead.
func (*RawTxData) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{32}
}

func (x *RawTxData) GetTxID() []byte {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *RawTxData) GetTxInput() []*TxInput {
	if x != nil {
		return x.TxInput
	}
	return nil
}

func (x *RawTxData) GetTxOutput() []*TxOutput {
	if x != nil {
		return x.TxOutput
	}
	return nil
}

func (x *RawTxData) GetTransactionFee() int64 {
	if x != nil {
		return x.TransactionFee
	}
	return 0
}

func (x *RawTxData) GetCoinbaseProofs() []*CoinbaseProof {
	if x != nil {
		return x.CoinbaseProofs
	}
	return nil
}

type Utxo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid     []byte    `protobuf:"bytes,1,opt,name=Txid,proto3" json:"Txid,omitempty"`
	Voutput  int64     `protobuf:"varint,2,opt,name=Voutput,proto3" json:"Voutput,omitempty"`
	TxOutput *TxOutput `protobuf:"bytes,3,opt,name=TxOutput,proto3" json:"TxOutput,omitempty"`
}

func (x *Utxo) Reset() {
	*x = Utxo{}
	mi := &file_pot_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Utxo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Utxo) ProtoMessage() {}

func (x *Utxo) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Utxo.ProtoReflect.Descriptor instead.
func (*Utxo) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{33}
}

func (x *Utxo) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *Utxo) GetVoutput() int64 {
	if x != nil {
		return x.Voutput
	}
	return 0
}

func (x *Utxo) GetTxOutput() *TxOutput {
	if x != nil {
		return x.TxOutput
	}
	return nil
}

type DevastateDciRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount      int64      `protobuf:"varint,1,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Tx          *RawTxData `protobuf:"bytes,2,opt,name=Tx,proto3" json:"Tx,omitempty"`
	To          []byte     `protobuf:"bytes,3,opt,name=To,proto3" json:"To,omitempty"`
	Transaction []byte     `protobuf:"bytes,4,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *DevastateDciRequest) Reset() {
	*x = DevastateDciRequest{}
	mi := &file_pot_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DevastateDciRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevastateDciRequest) ProtoMessage() {}

func (x *DevastateDciRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevastateDciRequest.ProtoReflect.Descriptor instead.
func (*DevastateDciRequest) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{34}
}

func (x *DevastateDciRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *DevastateDciRequest) GetTx() *RawTxData {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *DevastateDciRequest) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *DevastateDciRequest) GetTransaction() []byte {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type DevastateDciResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag bool `protobuf:"varint,1,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (x *DevastateDciResponse) Reset() {
	*x = DevastateDciResponse{}
	mi := &file_pot_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DevastateDciResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevastateDciResponse) ProtoMessage() {}

func (x *DevastateDciResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevastateDciResponse.ProtoReflect.Descriptor instead.
func (*DevastateDciResponse) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{35}
}

func (x *DevastateDciResponse) GetFlag() bool {
	if x != nil {
		return x.Flag
	}
	return false
}

type UTXOProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voutput int64  `protobuf:"varint,1,opt,name=Voutput,proto3" json:"Voutput,omitempty"`
	TxHash  []byte `protobuf:"bytes,2,opt,name=TxHash,proto3" json:"TxHash,omitempty"`
	Data    []byte `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *UTXOProof) Reset() {
	*x = UTXOProof{}
	mi := &file_pot_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UTXOProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UTXOProof) ProtoMessage() {}

func (x *UTXOProof) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UTXOProof.ProtoReflect.Descriptor instead.
func (*UTXOProof) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{36}
}

func (x *UTXOProof) GetVoutput() int64 {
	if x != nil {
		return x.Voutput
	}
	return 0
}

func (x *UTXOProof) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *UTXOProof) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type VerifyUTXORequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From  []byte `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	To    []byte `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
	Value int64  `protobuf:"varint,3,opt,name=Value,proto3" json:"Value,omitempty"`
	Proof []byte `protobuf:"bytes,4,opt,name=Proof,proto3" json:"Proof,omitempty"`
}

func (x *VerifyUTXORequest) Reset() {
	*x = VerifyUTXORequest{}
	mi := &file_pot_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyUTXORequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyUTXORequest) ProtoMessage() {}

func (x *VerifyUTXORequest) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyUTXORequest.ProtoReflect.Descriptor instead.
func (*VerifyUTXORequest) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{37}
}

func (x *VerifyUTXORequest) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *VerifyUTXORequest) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *VerifyUTXORequest) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *VerifyUTXORequest) GetProof() []byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

type VerifyUTXOResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag bool `protobuf:"varint,1,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (x *VerifyUTXOResponse) Reset() {
	*x = VerifyUTXOResponse{}
	mi := &file_pot_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyUTXOResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyUTXOResponse) ProtoMessage() {}

func (x *VerifyUTXOResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyUTXOResponse.ProtoReflect.Descriptor instead.
func (*VerifyUTXOResponse) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{38}
}

func (x *VerifyUTXOResponse) GetFlag() bool {
	if x != nil {
		return x.Flag
	}
	return false
}

type CoinbaseProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	TxHash  []byte `protobuf:"bytes,2,opt,name=TxHash,proto3" json:"TxHash,omitempty"`
	Amount  int64  `protobuf:"varint,3,opt,name=Amount,proto3" json:"Amount,omitempty"`
	BciType int32  `protobuf:"varint,4,opt,name=BciType,proto3" json:"BciType,omitempty"`
}

func (x *CoinbaseProof) Reset() {
	*x = CoinbaseProof{}
	mi := &file_pot_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoinbaseProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinbaseProof) ProtoMessage() {}

func (x *CoinbaseProof) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinbaseProof.ProtoReflect.Descriptor instead.
func (*CoinbaseProof) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{39}
}

func (x *CoinbaseProof) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *CoinbaseProof) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *CoinbaseProof) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CoinbaseProof) GetBciType() int32 {
	if x != nil {
		return x.BciType
	}
	return 0
}

type CreateLockTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx *RawTxData `protobuf:"bytes,1,opt,name=Tx,proto3" json:"Tx,omitempty"`
}

func (x *CreateLockTransactionRequest) Reset() {
	*x = CreateLockTransactionRequest{}
	mi := &file_pot_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLockTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLockTransactionRequest) ProtoMessage() {}

func (x *CreateLockTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLockTransactionRequest.ProtoReflect.Descriptor instead.
func (*CreateLockTransactionRequest) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{40}
}

func (x *CreateLockTransactionRequest) GetTx() *RawTxData {
	if x != nil {
		return x.Tx
	}
	return nil
}

type CreateLockTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx        *RawTxData `protobuf:"bytes,1,opt,name=Tx,proto3" json:"Tx,omitempty"`
	IsSuccess bool       `protobuf:"varint,2,opt,name=IsSuccess,proto3" json:"IsSuccess,omitempty"`
}

func (x *CreateLockTransactionResponse) Reset() {
	*x = CreateLockTransactionResponse{}
	mi := &file_pot_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLockTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLockTransactionResponse) ProtoMessage() {}

func (x *CreateLockTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLockTransactionResponse.ProtoReflect.Descriptor instead.
func (*CreateLockTransactionResponse) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{41}
}

func (x *CreateLockTransactionResponse) GetTx() *RawTxData {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *CreateLockTransactionResponse) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

type CreateLockTransferTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx     *RawTxData `protobuf:"bytes,1,opt,name=Tx,proto3" json:"Tx,omitempty"`
	To     []byte     `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
	Amount int64      `protobuf:"varint,3,opt,name=Amount,proto3" json:"Amount,omitempty"`
}

func (x *CreateLockTransferTransactionRequest) Reset() {
	*x = CreateLockTransferTransactionRequest{}
	mi := &file_pot_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLockTransferTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLockTransferTransactionRequest) ProtoMessage() {}

func (x *CreateLockTransferTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLockTransferTransactionRequest.ProtoReflect.Descriptor instead.
func (*CreateLockTransferTransactionRequest) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{42}
}

func (x *CreateLockTransferTransactionRequest) GetTx() *RawTxData {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *CreateLockTransferTransactionRequest) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *CreateLockTransferTransactionRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type CreateLockTransferTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx        *RawTxData `protobuf:"bytes,1,opt,name=Tx,proto3" json:"Tx,omitempty"`
	IsSuccess bool       `protobuf:"varint,2,opt,name=IsSuccess,proto3" json:"IsSuccess,omitempty"`
}

func (x *CreateLockTransferTransactionResponse) Reset() {
	*x = CreateLockTransferTransactionResponse{}
	mi := &file_pot_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLockTransferTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLockTransferTransactionResponse) ProtoMessage() {}

func (x *CreateLockTransferTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLockTransferTransactionResponse.ProtoReflect.Descriptor instead.
func (*CreateLockTransferTransactionResponse) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{43}
}

func (x *CreateLockTransferTransactionResponse) GetTx() *RawTxData {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *CreateLockTransferTransactionResponse) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

type CreateDevastateTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx     *RawTxData `protobuf:"bytes,1,opt,name=Tx,proto3" json:"Tx,omitempty"`
	To     []byte     `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
	Amount int64      `protobuf:"varint,3,opt,name=Amount,proto3" json:"Amount,omitempty"`
}

func (x *CreateDevastateTransactionRequest) Reset() {
	*x = CreateDevastateTransactionRequest{}
	mi := &file_pot_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDevastateTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDevastateTransactionRequest) ProtoMessage() {}

func (x *CreateDevastateTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDevastateTransactionRequest.ProtoReflect.Descriptor instead.
func (*CreateDevastateTransactionRequest) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{44}
}

func (x *CreateDevastateTransactionRequest) GetTx() *RawTxData {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *CreateDevastateTransactionRequest) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *CreateDevastateTransactionRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type CreateDevastateTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx        *RawTxData `protobuf:"bytes,1,opt,name=Tx,proto3" json:"Tx,omitempty"`
	IsSuccess bool       `protobuf:"varint,2,opt,name=IsSuccess,proto3" json:"IsSuccess,omitempty"`
}

func (x *CreateDevastateTransactionResponse) Reset() {
	*x = CreateDevastateTransactionResponse{}
	mi := &file_pot_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDevastateTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDevastateTransactionResponse) ProtoMessage() {}

func (x *CreateDevastateTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDevastateTransactionResponse.ProtoReflect.Descriptor instead.
func (*CreateDevastateTransactionResponse) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{45}
}

func (x *CreateDevastateTransactionResponse) GetTx() *RawTxData {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *CreateDevastateTransactionResponse) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

type CreateNonLockTransferTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx     *RawTxData `protobuf:"bytes,1,opt,name=Tx,proto3" json:"Tx,omitempty"`
	To     []byte     `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
	Amount int64      `protobuf:"varint,3,opt,name=Amount,proto3" json:"Amount,omitempty"`
}

func (x *CreateNonLockTransferTransactionRequest) Reset() {
	*x = CreateNonLockTransferTransactionRequest{}
	mi := &file_pot_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNonLockTransferTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNonLockTransferTransactionRequest) ProtoMessage() {}

func (x *CreateNonLockTransferTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNonLockTransferTransactionRequest.ProtoReflect.Descriptor instead.
func (*CreateNonLockTransferTransactionRequest) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{46}
}

func (x *CreateNonLockTransferTransactionRequest) GetTx() *RawTxData {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *CreateNonLockTransferTransactionRequest) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *CreateNonLockTransferTransactionRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type CreateNonLockTransferTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx        *RawTxData `protobuf:"bytes,1,opt,name=Tx,proto3" json:"Tx,omitempty"`
	IsSuccess bool       `protobuf:"varint,2,opt,name=IsSuccess,proto3" json:"IsSuccess,omitempty"`
}

func (x *CreateNonLockTransferTransactionResponse) Reset() {
	*x = CreateNonLockTransferTransactionResponse{}
	mi := &file_pot_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNonLockTransferTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNonLockTransferTransactionResponse) ProtoMessage() {}

func (x *CreateNonLockTransferTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pot_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNonLockTransferTransactionResponse.ProtoReflect.Descriptor instead.
func (*CreateNonLockTransferTransactionResponse) Descriptor() ([]byte, []int) {
	return file_pot_proto_rawDescGZIP(), []int{47}
}

func (x *CreateNonLockTransferTransactionResponse) GetTx() *RawTxData {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *CreateNonLockTransferTransactionResponse) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

var File_pot_proto protoreflect.FileDescriptor

var file_pot_proto_rawDesc = []byte{
	0x0a, 0x09, 0x70, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x22,
	0x80, 0x01, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x06, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x03, 0x54, 0x78, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x70, 0x62, 0x2e,
	0x54, 0x78, 0x52, 0x03, 0x54, 0x78, 0x73, 0x12, 0x39, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x22, 0x18, 0x0a, 0x02, 0x54, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x51, 0x0a, 0x0a,
	0x50, 0x6f, 0x54, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x4d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x4d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x74, 0x65, 0x22,
	0x8e, 0x03, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x6e, 0x63, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x55, 0x6e, 0x63, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x69, 0x78, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x4d, 0x69, 0x78, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x54, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x50, 0x6f, 0x54, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x18,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x61, 0x73, 0x68,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x54, 0x78, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x54, 0x78, 0x68, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x65, 0x65, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x65, 0x65, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x22, 0x51, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x22, 0x8e, 0x01, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x48, 0x61,
	0x73, 0x68, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x72, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x72, 0x63, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65,
	0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x73, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x72, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x64, 0x65, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x72, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x72, 0x63, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x64, 0x65, 0x73, 0x69, 0x64, 0x22, 0x72, 0x0a, 0x0a, 0x50, 0x6f, 0x54, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x44,
	0x65, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x44, 0x65, 0x73, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x44, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x72, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x53, 0x72, 0x63, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x72, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x53, 0x72, 0x63, 0x22, 0x5a, 0x0a, 0x08, 0x50,
	0x6f, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x72, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x53, 0x72, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x44, 0x65, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x54, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x44, 0x65, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x44, 0x65,
	0x73, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x44, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x72, 0x63, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53, 0x72, 0x63, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x53,
	0x72, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x53, 0x72, 0x63, 0x12, 0x14, 0x0a,
	0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x22, 0x56, 0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x06, 0x54, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x78,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x02,
	0x54, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x61,
	0x77, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x02, 0x54, 0x78, 0x22, 0x50, 0x0a, 0x06, 0x54,
	0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x0a, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x54,
	0x78, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x54, 0x78, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x22, 0x9f, 0x01,
	0x0a, 0x07, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x54, 0x78, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x56, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x56, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x73, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x73, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x63, 0x69, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x42, 0x63, 0x69, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xa0, 0x02, 0x0a, 0x08, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x50, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x50, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x63, 0x69, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x42, 0x63, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x12, 0x12, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x75, 0x72, 0x6e,
	0x4c, 0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x42, 0x75, 0x72, 0x6e,
	0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x50, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x54, 0x78,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x54, 0x78,
	0x48, 0x61, 0x73, 0x68, 0x22, 0x5b, 0x0a, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x29, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x20, 0x0a, 0x03, 0x54, 0x78, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x54, 0x78, 0x52, 0x03, 0x54, 0x78,
	0x73, 0x22, 0xa9, 0x02, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x78, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x54, 0x78, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a,
	0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x54, 0x78, 0x4e, 0x75, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x54, 0x78,
	0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x54,
	0x78, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x64, 0x54, 0x78, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x61, 0x73,
	0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x47, 0x61, 0x73, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x50, 0x6f, 0x53, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x50, 0x6f, 0x53, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x50,
	0x6f, 0x53, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x50, 0x6f, 0x53, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x50, 0x0a,
	0x0a, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x54, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x54,
	0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x54, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x42, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x44, 0x65, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x45,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x12, 0x28, 0x0a,
	0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x37, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x03, 0x54, 0x78,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x64, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x54, 0x78, 0x73,
	0x22, 0x4c, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x54, 0x78, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x54,
	0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x54, 0x78, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x08, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x22, 0x22,
	0x0a, 0x10, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x54, 0x78, 0x22, 0x4b, 0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x02, 0x54, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x78, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x54, 0x78, 0x49, 0x44, 0x22,
	0x33, 0x0a, 0x19, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x54, 0x78,
	0x48, 0x61, 0x73, 0x68, 0x22, 0x3a, 0x0a, 0x1a, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x69, 0x76, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x08, 0x52, 0x09, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73,
	0x22, 0x81, 0x01, 0x0a, 0x09, 0x44, 0x63, 0x69, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x08, 0x44, 0x63,
	0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x44, 0x63, 0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x08, 0x44, 0x63, 0x69, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x22, 0x72, 0x0a, 0x08, 0x44, 0x63, 0x69, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18,
	0x0a, 0x07, 0x42, 0x63, 0x69, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x42, 0x63, 0x69, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3d, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64,
	0x44, 0x63, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x44, 0x63,
	0x69, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x2e, 0x44, 0x63, 0x69, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x09, 0x44, 0x63,
	0x69, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x47, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x44,
	0x63, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49,
	0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0x4b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x68, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x05, 0x55, 0x74, 0x78, 0x6f, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x74, 0x78, 0x6f,
	0x52, 0x05, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x22, 0xd3, 0x01, 0x0a, 0x09, 0x52, 0x61, 0x77, 0x54,
	0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x54, 0x78, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x07, 0x54, 0x78, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e,
	0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x07, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x28, 0x0a, 0x08, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x52, 0x08, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x65, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x0e, 0x43,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x22, 0x5e, 0x0a,
	0x04, 0x55, 0x74, 0x78, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x54, 0x78, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x56, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x52, 0x08, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x7e, 0x0a,
	0x13, 0x44, 0x65, 0x76, 0x61, 0x73, 0x74, 0x61, 0x74, 0x65, 0x44, 0x63, 0x69, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x02,
	0x54, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x61,
	0x77, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x02, 0x54, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x54,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x54, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2a, 0x0a,
	0x14, 0x44, 0x65, 0x76, 0x61, 0x73, 0x74, 0x61, 0x74, 0x65, 0x44, 0x63, 0x69, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x22, 0x51, 0x0a, 0x09, 0x55, 0x54, 0x58,
	0x4f, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x56, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x63, 0x0a, 0x11,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x55, 0x54, 0x58, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x02, 0x54, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x22, 0x28, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x55, 0x54, 0x58, 0x4f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x22, 0x73, 0x0a, 0x0d, 0x43,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x18, 0x0a, 0x07,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x63, 0x69, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x42, 0x63, 0x69, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x3d, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x02, 0x54, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x61, 0x77, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x02, 0x54, 0x78, 0x22,
	0x5c, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x02, 0x54, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x61, 0x77, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x02, 0x54, 0x78, 0x12,
	0x1c, 0x0a, 0x09, 0x49, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x6d, 0x0a,
	0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x02, 0x54, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x02, 0x54, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x02, 0x54, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x64, 0x0a, 0x25,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x02, 0x54, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x02, 0x54, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0x6a, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x61,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x02, 0x54, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x54, 0x78, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x02, 0x54, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x02, 0x54, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x61,
	0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x61, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x02, 0x54, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x02, 0x54, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x70, 0x0a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x4c, 0x6f,
	0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x02,
	0x54, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x61,
	0x77, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x02, 0x54, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x54,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x54, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x67, 0x0a, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e,
	0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x02, 0x54, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x61, 0x77, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x02, 0x54, 0x78, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x49, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2a, 0xbd, 0x01, 0x0a,
	0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x6f, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x6f, 0x54, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x6f, 0x54, 0x5f, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x63, 0x69,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x65,
	0x76, 0x61, 0x73, 0x74, 0x61, 0x74, 0x65, 0x44, 0x63, 0x69, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x08, 0x2a, 0x26, 0x0a, 0x0a,
	0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x61,
	0x77, 0x54, 0x78, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x78, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x54, 0x78, 0x10, 0x01, 0x2a, 0x78, 0x0a, 0x06, 0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x6f, 0x63,
	0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x6f, 0x6e, 0x4c, 0x6f, 0x63,
	0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x61, 0x73, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x32, 0x8c,
	0x02, 0x0a, 0x0b, 0x50, 0x6f, 0x54, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x2f,
	0x0a, 0x06, 0x47, 0x65, 0x74, 0x54, 0x78, 0x73, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x38, 0x0a, 0x09, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x78, 0x73, 0x12, 0x13, 0x2e, 0x70,
	0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0a, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x54, 0x78, 0x73, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x49, 0x6e, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x2e, 0x70,
	0x62, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x62,
	0x2e, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xcd, 0x05,
	0x0a, 0x0a, 0x44, 0x63, 0x69, 0x45, 0x78, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x07,
	0x53, 0x65, 0x6e, 0x64, 0x44, 0x63, 0x69, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x44, 0x63, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x63, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x43, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x61, 0x73, 0x74, 0x61, 0x74, 0x65, 0x44, 0x63,
	0x69, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x76, 0x61, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x44, 0x63, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e,
	0x44, 0x65, 0x76, 0x61, 0x73, 0x74, 0x61, 0x74, 0x65, 0x44, 0x63, 0x69, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x55, 0x54, 0x58, 0x4f, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x55, 0x54, 0x58, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x62,
	0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x55, 0x54, 0x58, 0x4f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a,
	0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x61, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x61, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x61, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x20,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x4c,
	0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x6b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x06, 0x5a,
	0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pot_proto_rawDescOnce sync.Once
	file_pot_proto_rawDescData = file_pot_proto_rawDesc
)

func file_pot_proto_rawDescGZIP() []byte {
	file_pot_proto_rawDescOnce.Do(func() {
		file_pot_proto_rawDescData = protoimpl.X.CompressGZIP(file_pot_proto_rawDescData)
	})
	return file_pot_proto_rawDescData
}

var file_pot_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_pot_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_pot_proto_goTypes = []any{
	(MessageType)(0),                                 // 0: pb.MessageType
	(TxDataType)(0),                                  // 1: pb.TxDataType
	(TxType)(0),                                      // 2: pb.TxType
	(*Block)(nil),                                    // 3: pb.Block
	(*Tx)(nil),                                       // 4: pb.Tx
	(*PoTMessage)(nil),                               // 5: pb.PoTMessage
	(*Header)(nil),                                   // 6: pb.Header
	(*Command)(nil),                                  // 7: pb.Command
	(*BlockRequest)(nil),                             // 8: pb.BlockRequest
	(*BlockResponse)(nil),                            // 9: pb.BlockResponse
	(*PoTRequest)(nil),                               // 10: pb.PoTRequest
	(*PotProof)(nil),                                 // 11: pb.PotProof
	(*PoTResponse)(nil),                              // 12: pb.PoTResponse
	(*ClientTransaction)(nil),                        // 13: pb.ClientTransaction
	(*TxData)(nil),                                   // 14: pb.TxData
	(*TxInput)(nil),                                  // 15: pb.TxInput
	(*TxOutput)(nil),                                 // 16: pb.TxOutput
	(*ExecutedTxData)(nil),                           // 17: pb.ExecutedTxData
	(*ExecuteBlock)(nil),                             // 18: pb.ExecuteBlock
	(*ExecuteHeader)(nil),                            // 19: pb.ExecuteHeader
	(*ExecutedTx)(nil),                               // 20: pb.ExecutedTx
	(*GetTxRequest)(nil),                             // 21: pb.GetTxRequest
	(*GetTxResponse)(nil),                            // 22: pb.GetTxResponse
	(*VerifyTxRequest)(nil),                          // 23: pb.VerifyTxRequest
	(*VerifyTxResponse)(nil),                         // 24: pb.VerifyTxResponse
	(*ExecuteTxRequest)(nil),                         // 25: pb.ExecuteTxRequest
	(*ExecuteTxResponse)(nil),                        // 26: pb.ExecuteTxResponse
	(*IncensentiveVerifyRequest)(nil),                // 27: pb.IncensentiveVerifyRequest
	(*IncensentiveVerifyResponse)(nil),               // 28: pb.IncensentiveVerifyResponse
	(*DciReward)(nil),                                // 29: pb.DciReward
	(*DciProof)(nil),                                 // 30: pb.DciProof
	(*SendDciRequest)(nil),                           // 31: pb.SendDciRequest
	(*SendDciResponse)(nil),                          // 32: pb.SendDciResponse
	(*GetBalanceRequest)(nil),                        // 33: pb.GetBalanceRequest
	(*GetBalanceResponse)(nil),                       // 34: pb.GetBalanceResponse
	(*RawTxData)(nil),                                // 35: pb.RawTxData
	(*Utxo)(nil),                                     // 36: pb.Utxo
	(*DevastateDciRequest)(nil),                      // 37: pb.DevastateDciRequest
	(*DevastateDciResponse)(nil),                     // 38: pb.DevastateDciResponse
	(*UTXOProof)(nil),                                // 39: pb.UTXOProof
	(*VerifyUTXORequest)(nil),                        // 40: pb.VerifyUTXORequest
	(*VerifyUTXOResponse)(nil),                       // 41: pb.VerifyUTXOResponse
	(*CoinbaseProof)(nil),                            // 42: pb.CoinbaseProof
	(*CreateLockTransactionRequest)(nil),             // 43: pb.CreateLockTransactionRequest
	(*CreateLockTransactionResponse)(nil),            // 44: pb.CreateLockTransactionResponse
	(*CreateLockTransferTransactionRequest)(nil),     // 45: pb.CreateLockTransferTransactionRequest
	(*CreateLockTransferTransactionResponse)(nil),    // 46: pb.CreateLockTransferTransactionResponse
	(*CreateDevastateTransactionRequest)(nil),        // 47: pb.CreateDevastateTransactionRequest
	(*CreateDevastateTransactionResponse)(nil),       // 48: pb.CreateDevastateTransactionResponse
	(*CreateNonLockTransferTransactionRequest)(nil),  // 49: pb.CreateNonLockTransferTransactionRequest
	(*CreateNonLockTransferTransactionResponse)(nil), // 50: pb.CreateNonLockTransferTransactionResponse
}
var file_pot_proto_depIdxs = []int32{
	6,  // 0: pb.Block.Header:type_name -> pb.Header
	4,  // 1: pb.Block.Txs:type_name -> pb.Tx
	19, // 2: pb.Block.ExecuteHeaders:type_name -> pb.ExecuteHeader
	0,  // 3: pb.PoTMessage.MsgType:type_name -> pb.MessageType
	3,  // 4: pb.BlockResponse.block:type_name -> pb.Block
	2,  // 5: pb.ClientTransaction.TxType:type_name -> pb.TxType
	35, // 6: pb.ClientTransaction.Tx:type_name -> pb.RawTxData
	1,  // 7: pb.TxData.TxDataType:type_name -> pb.TxDataType
	19, // 8: pb.ExecuteBlock.Header:type_name -> pb.ExecuteHeader
	20, // 9: pb.ExecuteBlock.Txs:type_name -> pb.ExecutedTx
	18, // 10: pb.GetTxResponse.Blocks:type_name -> pb.ExecuteBlock
	17, // 11: pb.VerifyTxRequest.Txs:type_name -> pb.ExecutedTxData
	17, // 12: pb.VerifyTxResponse.Txs:type_name -> pb.ExecutedTxData
	30, // 13: pb.DciReward.DciProof:type_name -> pb.DciProof
	29, // 14: pb.SendDciRequest.DciReward:type_name -> pb.DciReward
	36, // 15: pb.GetBalanceResponse.Utxos:type_name -> pb.Utxo
	15, // 16: pb.RawTxData.TxInput:type_name -> pb.TxInput
	16, // 17: pb.RawTxData.TxOutput:type_name -> pb.TxOutput
	42, // 18: pb.RawTxData.CoinbaseProofs:type_name -> pb.CoinbaseProof
	16, // 19: pb.Utxo.TxOutput:type_name -> pb.TxOutput
	35, // 20: pb.DevastateDciRequest.Tx:type_name -> pb.RawTxData
	35, // 21: pb.CreateLockTransactionRequest.Tx:type_name -> pb.RawTxData
	35, // 22: pb.CreateLockTransactionResponse.Tx:type_name -> pb.RawTxData
	35, // 23: pb.CreateLockTransferTransactionRequest.Tx:type_name -> pb.RawTxData
	35, // 24: pb.CreateLockTransferTransactionResponse.Tx:type_name -> pb.RawTxData
	35, // 25: pb.CreateDevastateTransactionRequest.Tx:type_name -> pb.RawTxData
	35, // 26: pb.CreateDevastateTransactionResponse.Tx:type_name -> pb.RawTxData
	35, // 27: pb.CreateNonLockTransferTransactionRequest.Tx:type_name -> pb.RawTxData
	35, // 28: pb.CreateNonLockTransferTransactionResponse.Tx:type_name -> pb.RawTxData
	21, // 29: pb.PoTExecutor.GetTxs:input_type -> pb.GetTxRequest
	23, // 30: pb.PoTExecutor.VerifyTxs:input_type -> pb.VerifyTxRequest
	25, // 31: pb.PoTExecutor.ExecuteTxs:input_type -> pb.ExecuteTxRequest
	27, // 32: pb.PoTExecutor.VerifyIncensentive:input_type -> pb.IncensentiveVerifyRequest
	31, // 33: pb.DciExector.SendDci:input_type -> pb.SendDciRequest
	33, // 34: pb.DciExector.GetBalance:input_type -> pb.GetBalanceRequest
	37, // 35: pb.DciExector.DevastateDci:input_type -> pb.DevastateDciRequest
	40, // 36: pb.DciExector.VerifyUTXO:input_type -> pb.VerifyUTXORequest
	43, // 37: pb.DciExector.CreateLockTransaction:input_type -> pb.CreateLockTransactionRequest
	45, // 38: pb.DciExector.CreateLockTransferTransaction:input_type -> pb.CreateLockTransferTransactionRequest
	47, // 39: pb.DciExector.CreateDevastateTransaction:input_type -> pb.CreateDevastateTransactionRequest
	49, // 40: pb.DciExector.CreateNonLockTransferTransaction:input_type -> pb.CreateNonLockTransferTransactionRequest
	22, // 41: pb.PoTExecutor.GetTxs:output_type -> pb.GetTxResponse
	24, // 42: pb.PoTExecutor.VerifyTxs:output_type -> pb.VerifyTxResponse
	26, // 43: pb.PoTExecutor.ExecuteTxs:output_type -> pb.ExecuteTxResponse
	28, // 44: pb.PoTExecutor.VerifyIncensentive:output_type -> pb.IncensentiveVerifyResponse
	32, // 45: pb.DciExector.SendDci:output_type -> pb.SendDciResponse
	34, // 46: pb.DciExector.GetBalance:output_type -> pb.GetBalanceResponse
	38, // 47: pb.DciExector.DevastateDci:output_type -> pb.DevastateDciResponse
	41, // 48: pb.DciExector.VerifyUTXO:output_type -> pb.VerifyUTXOResponse
	44, // 49: pb.DciExector.CreateLockTransaction:output_type -> pb.CreateLockTransactionResponse
	46, // 50: pb.DciExector.CreateLockTransferTransaction:output_type -> pb.CreateLockTransferTransactionResponse
	48, // 51: pb.DciExector.CreateDevastateTransaction:output_type -> pb.CreateDevastateTransactionResponse
	50, // 52: pb.DciExector.CreateNonLockTransferTransaction:output_type -> pb.CreateNonLockTransferTransactionResponse
	41, // [41:53] is the sub-list for method output_type
	29, // [29:41] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_pot_proto_init() }
func file_pot_proto_init() {
	if File_pot_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pot_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_pot_proto_goTypes,
		DependencyIndexes: file_pot_proto_depIdxs,
		EnumInfos:         file_pot_proto_enumTypes,
		MessageInfos:      file_pot_proto_msgTypes,
	}.Build()
	File_pot_proto = out.File
	file_pot_proto_rawDesc = nil
	file_pot_proto_goTypes = nil
	file_pot_proto_depIdxs = nil
}
