// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.0
// source: transfer.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransferGRPC_CommitChangeTx_FullMethodName   = "/pb.TransferGRPC/CommitChangeTx"
	TransferGRPC_VerifyWithdrawTx_FullMethodName = "/pb.TransferGRPC/VerifyWithdrawTx"
)

// TransferGRPCClient is the client API for TransferGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransferGRPCClient interface {
	CommitChangeTx(ctx context.Context, in *CommitChangeTxRequest, opts ...grpc.CallOption) (*Empty, error)
	VerifyWithdrawTx(ctx context.Context, in *VerifyWithdrawTxRequest, opts ...grpc.CallOption) (*VerifyWithdrawTxReply, error)
}

type transferGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewTransferGRPCClient(cc grpc.ClientConnInterface) TransferGRPCClient {
	return &transferGRPCClient{cc}
}

func (c *transferGRPCClient) CommitChangeTx(ctx context.Context, in *CommitChangeTxRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, TransferGRPC_CommitChangeTx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferGRPCClient) VerifyWithdrawTx(ctx context.Context, in *VerifyWithdrawTxRequest, opts ...grpc.CallOption) (*VerifyWithdrawTxReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyWithdrawTxReply)
	err := c.cc.Invoke(ctx, TransferGRPC_VerifyWithdrawTx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransferGRPCServer is the server API for TransferGRPC service.
// All implementations must embed UnimplementedTransferGRPCServer
// for forward compatibility.
type TransferGRPCServer interface {
	CommitChangeTx(context.Context, *CommitChangeTxRequest) (*Empty, error)
	VerifyWithdrawTx(context.Context, *VerifyWithdrawTxRequest) (*VerifyWithdrawTxReply, error)
	mustEmbedUnimplementedTransferGRPCServer()
}

// UnimplementedTransferGRPCServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransferGRPCServer struct{}

func (UnimplementedTransferGRPCServer) CommitChangeTx(context.Context, *CommitChangeTxRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitChangeTx not implemented")
}
func (UnimplementedTransferGRPCServer) VerifyWithdrawTx(context.Context, *VerifyWithdrawTxRequest) (*VerifyWithdrawTxReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyWithdrawTx not implemented")
}
func (UnimplementedTransferGRPCServer) mustEmbedUnimplementedTransferGRPCServer() {}
func (UnimplementedTransferGRPCServer) testEmbeddedByValue()                      {}

// UnsafeTransferGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransferGRPCServer will
// result in compilation errors.
type UnsafeTransferGRPCServer interface {
	mustEmbedUnimplementedTransferGRPCServer()
}

func RegisterTransferGRPCServer(s grpc.ServiceRegistrar, srv TransferGRPCServer) {
	// If the following call pancis, it indicates UnimplementedTransferGRPCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransferGRPC_ServiceDesc, srv)
}

func _TransferGRPC_CommitChangeTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitChangeTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferGRPCServer).CommitChangeTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferGRPC_CommitChangeTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferGRPCServer).CommitChangeTx(ctx, req.(*CommitChangeTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferGRPC_VerifyWithdrawTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyWithdrawTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferGRPCServer).VerifyWithdrawTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferGRPC_VerifyWithdrawTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferGRPCServer).VerifyWithdrawTx(ctx, req.(*VerifyWithdrawTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransferGRPC_ServiceDesc is the grpc.ServiceDesc for TransferGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransferGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TransferGRPC",
	HandlerType: (*TransferGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommitChangeTx",
			Handler:    _TransferGRPC_CommitChangeTx_Handler,
		},
		{
			MethodName: "VerifyWithdrawTx",
			Handler:    _TransferGRPC_VerifyWithdrawTx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transfer.proto",
}
