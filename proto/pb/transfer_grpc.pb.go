// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: transfer.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TransferGRPC_ToTransferCommit_FullMethodName = "/proto.TransferGRPC/ToTransferCommit"
)

// TransferGRPCClient is the client API for TransferGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransferGRPCClient interface {
	ToTransferCommit(ctx context.Context, in *ToTransferRequest, opts ...grpc.CallOption) (*ToTransferReply, error)
}

type transferGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewTransferGRPCClient(cc grpc.ClientConnInterface) TransferGRPCClient {
	return &transferGRPCClient{cc}
}

func (c *transferGRPCClient) ToTransferCommit(ctx context.Context, in *ToTransferRequest, opts ...grpc.CallOption) (*ToTransferReply, error) {
	out := new(ToTransferReply)
	err := c.cc.Invoke(ctx, TransferGRPC_ToTransferCommit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransferGRPCServer is the server API for TransferGRPC service.
// All implementations must embed UnimplementedTransferGRPCServer
// for forward compatibility
type TransferGRPCServer interface {
	ToTransferCommit(context.Context, *ToTransferRequest) (*ToTransferReply, error)
	mustEmbedUnimplementedTransferGRPCServer()
}

// UnimplementedTransferGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedTransferGRPCServer struct {
}

func (UnimplementedTransferGRPCServer) ToTransferCommit(context.Context, *ToTransferRequest) (*ToTransferReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToTransferCommit not implemented")
}
func (UnimplementedTransferGRPCServer) mustEmbedUnimplementedTransferGRPCServer() {}

// UnsafeTransferGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransferGRPCServer will
// result in compilation errors.
type UnsafeTransferGRPCServer interface {
	mustEmbedUnimplementedTransferGRPCServer()
}

func RegisterTransferGRPCServer(s grpc.ServiceRegistrar, srv TransferGRPCServer) {
	s.RegisterService(&TransferGRPC_ServiceDesc, srv)
}

func _TransferGRPC_ToTransferCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferGRPCServer).ToTransferCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferGRPC_ToTransferCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferGRPCServer).ToTransferCommit(ctx, req.(*ToTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransferGRPC_ServiceDesc is the grpc.ServiceDesc for TransferGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransferGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TransferGRPC",
	HandlerType: (*TransferGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ToTransferCommit",
			Handler:    _TransferGRPC_ToTransferCommit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transfer.proto",
}