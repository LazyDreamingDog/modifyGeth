// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.0
// source: pot.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PoTExecutor_GetTxs_FullMethodName             = "/pb.PoTExecutor/GetTxs"
	PoTExecutor_VerifyTxs_FullMethodName          = "/pb.PoTExecutor/VerifyTxs"
	PoTExecutor_ExecuteTxs_FullMethodName         = "/pb.PoTExecutor/ExecuteTxs"
	PoTExecutor_VerifyIncensentive_FullMethodName = "/pb.PoTExecutor/VerifyIncensentive"
)

// PoTExecutorClient is the client API for PoTExecutor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PoTExecutorClient interface {
	GetTxs(ctx context.Context, in *GetTxRequest, opts ...grpc.CallOption) (*GetTxResponse, error)
	VerifyTxs(ctx context.Context, in *VerifyTxRequest, opts ...grpc.CallOption) (*VerifyTxResponse, error)
	ExecuteTxs(ctx context.Context, in *ExecuteTxRequest, opts ...grpc.CallOption) (*ExecuteTxResponse, error)
	VerifyIncensentive(ctx context.Context, in *IncensentiveVerifyRequest, opts ...grpc.CallOption) (*IncensentiveVerifyResponse, error)
}

type poTExecutorClient struct {
	cc grpc.ClientConnInterface
}

func NewPoTExecutorClient(cc grpc.ClientConnInterface) PoTExecutorClient {
	return &poTExecutorClient{cc}
}

func (c *poTExecutorClient) GetTxs(ctx context.Context, in *GetTxRequest, opts ...grpc.CallOption) (*GetTxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTxResponse)
	err := c.cc.Invoke(ctx, PoTExecutor_GetTxs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poTExecutorClient) VerifyTxs(ctx context.Context, in *VerifyTxRequest, opts ...grpc.CallOption) (*VerifyTxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyTxResponse)
	err := c.cc.Invoke(ctx, PoTExecutor_VerifyTxs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poTExecutorClient) ExecuteTxs(ctx context.Context, in *ExecuteTxRequest, opts ...grpc.CallOption) (*ExecuteTxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteTxResponse)
	err := c.cc.Invoke(ctx, PoTExecutor_ExecuteTxs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poTExecutorClient) VerifyIncensentive(ctx context.Context, in *IncensentiveVerifyRequest, opts ...grpc.CallOption) (*IncensentiveVerifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncensentiveVerifyResponse)
	err := c.cc.Invoke(ctx, PoTExecutor_VerifyIncensentive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoTExecutorServer is the server API for PoTExecutor service.
// All implementations must embed UnimplementedPoTExecutorServer
// for forward compatibility.
type PoTExecutorServer interface {
	GetTxs(context.Context, *GetTxRequest) (*GetTxResponse, error)
	VerifyTxs(context.Context, *VerifyTxRequest) (*VerifyTxResponse, error)
	ExecuteTxs(context.Context, *ExecuteTxRequest) (*ExecuteTxResponse, error)
	VerifyIncensentive(context.Context, *IncensentiveVerifyRequest) (*IncensentiveVerifyResponse, error)
	mustEmbedUnimplementedPoTExecutorServer()
}

// UnimplementedPoTExecutorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPoTExecutorServer struct{}

func (UnimplementedPoTExecutorServer) GetTxs(context.Context, *GetTxRequest) (*GetTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxs not implemented")
}
func (UnimplementedPoTExecutorServer) VerifyTxs(context.Context, *VerifyTxRequest) (*VerifyTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTxs not implemented")
}
func (UnimplementedPoTExecutorServer) ExecuteTxs(context.Context, *ExecuteTxRequest) (*ExecuteTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTxs not implemented")
}
func (UnimplementedPoTExecutorServer) VerifyIncensentive(context.Context, *IncensentiveVerifyRequest) (*IncensentiveVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyIncensentive not implemented")
}
func (UnimplementedPoTExecutorServer) mustEmbedUnimplementedPoTExecutorServer() {}
func (UnimplementedPoTExecutorServer) testEmbeddedByValue()                     {}

// UnsafePoTExecutorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PoTExecutorServer will
// result in compilation errors.
type UnsafePoTExecutorServer interface {
	mustEmbedUnimplementedPoTExecutorServer()
}

func RegisterPoTExecutorServer(s grpc.ServiceRegistrar, srv PoTExecutorServer) {
	// If the following call pancis, it indicates UnimplementedPoTExecutorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PoTExecutor_ServiceDesc, srv)
}

func _PoTExecutor_GetTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoTExecutorServer).GetTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoTExecutor_GetTxs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoTExecutorServer).GetTxs(ctx, req.(*GetTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoTExecutor_VerifyTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoTExecutorServer).VerifyTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoTExecutor_VerifyTxs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoTExecutorServer).VerifyTxs(ctx, req.(*VerifyTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoTExecutor_ExecuteTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoTExecutorServer).ExecuteTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoTExecutor_ExecuteTxs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoTExecutorServer).ExecuteTxs(ctx, req.(*ExecuteTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoTExecutor_VerifyIncensentive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncensentiveVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoTExecutorServer).VerifyIncensentive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoTExecutor_VerifyIncensentive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoTExecutorServer).VerifyIncensentive(ctx, req.(*IncensentiveVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PoTExecutor_ServiceDesc is the grpc.ServiceDesc for PoTExecutor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PoTExecutor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PoTExecutor",
	HandlerType: (*PoTExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTxs",
			Handler:    _PoTExecutor_GetTxs_Handler,
		},
		{
			MethodName: "VerifyTxs",
			Handler:    _PoTExecutor_VerifyTxs_Handler,
		},
		{
			MethodName: "ExecuteTxs",
			Handler:    _PoTExecutor_ExecuteTxs_Handler,
		},
		{
			MethodName: "VerifyIncensentive",
			Handler:    _PoTExecutor_VerifyIncensentive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pot.proto",
}

const (
	DciExector_SendDci_FullMethodName                          = "/pb.DciExector/SendDci"
	DciExector_GetBalance_FullMethodName                       = "/pb.DciExector/GetBalance"
	DciExector_DevastateDci_FullMethodName                     = "/pb.DciExector/DevastateDci"
	DciExector_VerifyUTXO_FullMethodName                       = "/pb.DciExector/VerifyUTXO"
	DciExector_CreateLockTransaction_FullMethodName            = "/pb.DciExector/CreateLockTransaction"
	DciExector_CreateLockTransferTransaction_FullMethodName    = "/pb.DciExector/CreateLockTransferTransaction"
	DciExector_CreateDevastateTransaction_FullMethodName       = "/pb.DciExector/CreateDevastateTransaction"
	DciExector_CreateNonLockTransferTransaction_FullMethodName = "/pb.DciExector/CreateNonLockTransferTransaction"
)

// DciExectorClient is the client API for DciExector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DciExectorClient interface {
	SendDci(ctx context.Context, in *SendDciRequest, opts ...grpc.CallOption) (*SendDciResponse, error)
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	DevastateDci(ctx context.Context, in *DevastateDciRequest, opts ...grpc.CallOption) (*DevastateDciResponse, error)
	VerifyUTXO(ctx context.Context, in *VerifyUTXORequest, opts ...grpc.CallOption) (*VerifyUTXOResponse, error)
	CreateLockTransaction(ctx context.Context, in *CreateLockTransactionRequest, opts ...grpc.CallOption) (*CreateLockTransactionResponse, error)
	CreateLockTransferTransaction(ctx context.Context, in *CreateLockTransferTransactionRequest, opts ...grpc.CallOption) (*CreateLockTransferTransactionResponse, error)
	CreateDevastateTransaction(ctx context.Context, in *CreateDevastateTransactionRequest, opts ...grpc.CallOption) (*CreateDevastateTransactionResponse, error)
	CreateNonLockTransferTransaction(ctx context.Context, in *CreateNonLockTransferTransactionRequest, opts ...grpc.CallOption) (*CreateNonLockTransferTransactionResponse, error)
}

type dciExectorClient struct {
	cc grpc.ClientConnInterface
}

func NewDciExectorClient(cc grpc.ClientConnInterface) DciExectorClient {
	return &dciExectorClient{cc}
}

func (c *dciExectorClient) SendDci(ctx context.Context, in *SendDciRequest, opts ...grpc.CallOption) (*SendDciResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendDciResponse)
	err := c.cc.Invoke(ctx, DciExector_SendDci_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dciExectorClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, DciExector_GetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dciExectorClient) DevastateDci(ctx context.Context, in *DevastateDciRequest, opts ...grpc.CallOption) (*DevastateDciResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DevastateDciResponse)
	err := c.cc.Invoke(ctx, DciExector_DevastateDci_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dciExectorClient) VerifyUTXO(ctx context.Context, in *VerifyUTXORequest, opts ...grpc.CallOption) (*VerifyUTXOResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyUTXOResponse)
	err := c.cc.Invoke(ctx, DciExector_VerifyUTXO_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dciExectorClient) CreateLockTransaction(ctx context.Context, in *CreateLockTransactionRequest, opts ...grpc.CallOption) (*CreateLockTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLockTransactionResponse)
	err := c.cc.Invoke(ctx, DciExector_CreateLockTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dciExectorClient) CreateLockTransferTransaction(ctx context.Context, in *CreateLockTransferTransactionRequest, opts ...grpc.CallOption) (*CreateLockTransferTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLockTransferTransactionResponse)
	err := c.cc.Invoke(ctx, DciExector_CreateLockTransferTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dciExectorClient) CreateDevastateTransaction(ctx context.Context, in *CreateDevastateTransactionRequest, opts ...grpc.CallOption) (*CreateDevastateTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDevastateTransactionResponse)
	err := c.cc.Invoke(ctx, DciExector_CreateDevastateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dciExectorClient) CreateNonLockTransferTransaction(ctx context.Context, in *CreateNonLockTransferTransactionRequest, opts ...grpc.CallOption) (*CreateNonLockTransferTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNonLockTransferTransactionResponse)
	err := c.cc.Invoke(ctx, DciExector_CreateNonLockTransferTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DciExectorServer is the server API for DciExector service.
// All implementations must embed UnimplementedDciExectorServer
// for forward compatibility.
type DciExectorServer interface {
	SendDci(context.Context, *SendDciRequest) (*SendDciResponse, error)
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	DevastateDci(context.Context, *DevastateDciRequest) (*DevastateDciResponse, error)
	VerifyUTXO(context.Context, *VerifyUTXORequest) (*VerifyUTXOResponse, error)
	CreateLockTransaction(context.Context, *CreateLockTransactionRequest) (*CreateLockTransactionResponse, error)
	CreateLockTransferTransaction(context.Context, *CreateLockTransferTransactionRequest) (*CreateLockTransferTransactionResponse, error)
	CreateDevastateTransaction(context.Context, *CreateDevastateTransactionRequest) (*CreateDevastateTransactionResponse, error)
	CreateNonLockTransferTransaction(context.Context, *CreateNonLockTransferTransactionRequest) (*CreateNonLockTransferTransactionResponse, error)
	mustEmbedUnimplementedDciExectorServer()
}

// UnimplementedDciExectorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDciExectorServer struct{}

func (UnimplementedDciExectorServer) SendDci(context.Context, *SendDciRequest) (*SendDciResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDci not implemented")
}
func (UnimplementedDciExectorServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedDciExectorServer) DevastateDci(context.Context, *DevastateDciRequest) (*DevastateDciResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DevastateDci not implemented")
}
func (UnimplementedDciExectorServer) VerifyUTXO(context.Context, *VerifyUTXORequest) (*VerifyUTXOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUTXO not implemented")
}
func (UnimplementedDciExectorServer) CreateLockTransaction(context.Context, *CreateLockTransactionRequest) (*CreateLockTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLockTransaction not implemented")
}
func (UnimplementedDciExectorServer) CreateLockTransferTransaction(context.Context, *CreateLockTransferTransactionRequest) (*CreateLockTransferTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLockTransferTransaction not implemented")
}
func (UnimplementedDciExectorServer) CreateDevastateTransaction(context.Context, *CreateDevastateTransactionRequest) (*CreateDevastateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevastateTransaction not implemented")
}
func (UnimplementedDciExectorServer) CreateNonLockTransferTransaction(context.Context, *CreateNonLockTransferTransactionRequest) (*CreateNonLockTransferTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNonLockTransferTransaction not implemented")
}
func (UnimplementedDciExectorServer) mustEmbedUnimplementedDciExectorServer() {}
func (UnimplementedDciExectorServer) testEmbeddedByValue()                    {}

// UnsafeDciExectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DciExectorServer will
// result in compilation errors.
type UnsafeDciExectorServer interface {
	mustEmbedUnimplementedDciExectorServer()
}

func RegisterDciExectorServer(s grpc.ServiceRegistrar, srv DciExectorServer) {
	// If the following call pancis, it indicates UnimplementedDciExectorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DciExector_ServiceDesc, srv)
}

func _DciExector_SendDci_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDciRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DciExectorServer).SendDci(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DciExector_SendDci_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DciExectorServer).SendDci(ctx, req.(*SendDciRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DciExector_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DciExectorServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DciExector_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DciExectorServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DciExector_DevastateDci_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DevastateDciRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DciExectorServer).DevastateDci(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DciExector_DevastateDci_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DciExectorServer).DevastateDci(ctx, req.(*DevastateDciRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DciExector_VerifyUTXO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyUTXORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DciExectorServer).VerifyUTXO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DciExector_VerifyUTXO_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DciExectorServer).VerifyUTXO(ctx, req.(*VerifyUTXORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DciExector_CreateLockTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLockTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DciExectorServer).CreateLockTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DciExector_CreateLockTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DciExectorServer).CreateLockTransaction(ctx, req.(*CreateLockTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DciExector_CreateLockTransferTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLockTransferTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DciExectorServer).CreateLockTransferTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DciExector_CreateLockTransferTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DciExectorServer).CreateLockTransferTransaction(ctx, req.(*CreateLockTransferTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DciExector_CreateDevastateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDevastateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DciExectorServer).CreateDevastateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DciExector_CreateDevastateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DciExectorServer).CreateDevastateTransaction(ctx, req.(*CreateDevastateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DciExector_CreateNonLockTransferTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNonLockTransferTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DciExectorServer).CreateNonLockTransferTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DciExector_CreateNonLockTransferTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DciExectorServer).CreateNonLockTransferTransaction(ctx, req.(*CreateNonLockTransferTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DciExector_ServiceDesc is the grpc.ServiceDesc for DciExector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DciExector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DciExector",
	HandlerType: (*DciExectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendDci",
			Handler:    _DciExector_SendDci_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _DciExector_GetBalance_Handler,
		},
		{
			MethodName: "DevastateDci",
			Handler:    _DciExector_DevastateDci_Handler,
		},
		{
			MethodName: "VerifyUTXO",
			Handler:    _DciExector_VerifyUTXO_Handler,
		},
		{
			MethodName: "CreateLockTransaction",
			Handler:    _DciExector_CreateLockTransaction_Handler,
		},
		{
			MethodName: "CreateLockTransferTransaction",
			Handler:    _DciExector_CreateLockTransferTransaction_Handler,
		},
		{
			MethodName: "CreateDevastateTransaction",
			Handler:    _DciExector_CreateDevastateTransaction_Handler,
		},
		{
			MethodName: "CreateNonLockTransferTransaction",
			Handler:    _DciExector_CreateNonLockTransferTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pot.proto",
}
